
public class HomeWork0 {

	public static void main(String[] args) {
		/*
		 ===========================================
		 1. �ذ� ���� ���
		 -C/C++, Java, C# Python, ��Ÿ ���α׷��� ���
		 2. �ذ� ����
		 -Loop (�ݺ���) ����
		 ===========================================
		 */
		
		/*
		 1. 3���� ���ڸ� �Է¹޾Ƽ� Ȧ��, ¦���� �����ϴ� ���α׷�.
		 ����1) for, while, do-while ���
		 ---------------------------
		 ¦��,Ȧ�� ���� ���α׷� v1.0
		 ---------------------------
		 1.Num1 => 6
		 ¦���Դϴ�.
		 2.Num2 => 71
		 Ȧ���Դϴ�.
		 3.Num3 => 34
		 ¦���Դϴ�.
		 
		 2. 1~100������ �����ֿ� 5�� ����� ����ϴ� ���α׷�.
		 ����1) for, while, do-while ���
		 5,10,15,20...95,100
		 
		 3. 1~45�� ���ڸ� �������� �߻����� �ζ� ���α׷� �����.
		 ����1) for, while, do-while ���
		 ����2) ������ ���ڰ� �߻��ϴ°��� ����(�迭���� ó�� �ʿ�)
		 --------------------
		 ������ �ζ� ���α׷� v1.0
		 --------------------
		 23 7 10 11 39 44
		 
		 4. 2���� ���ڸ� �Է� �޾Ƽ� ù��° ���ڴ� ����, �ι�° ���ڴ� �������� ��Ÿ��. 
		 ���ۺ��� ������ ���� ���� ���ϱ�.
		 ����1) �Է¹޴� 2��°�� ���� ù��° ������ �۰ų� ������ ������ 
		 ǥ���ϰ� �ٽ� 2��° ���ڸ� �Է� �޵��� ó��.
		 1.Num1 �Է�=> 1
		 2.Num2 �Է�=> 10
		 1~10������ �� : 55
		 
		 5. 1���� ���ڸ� �Է¹޾� ������ ���
		 -----------------
		 ������ ������ ���α׷�
		 -----------------
		 1. ������ �Է� => 4
		 4 X 1 = 4
		 ...
		 4 X 9 = 36
		 
		 6. ������ 2 ~ 9�ܱ��� ���
		 -----------------
		 ������ ���α׷� v1.3
		 -----------------
		 2X1=2 3X1=3 4X1=4 ... 9X1=9
		 2X2=4 3X2=6 4X2=8 ... 9X2=18
		 ...
		 2X9=18				   9X9=81
		 
		 7. ���ѷ����� ����Ͽ� �����ϴ� ���α׷�
		 ����1) �޴� ������ �߸��ϸ� "�߸��� �Է��Դϴ�."�� ����ϰ�
		 �ٽ� �޴� �����ϵ��� ó��.
		 ����2) �޴��� �����Ͽ� �����ϴ��� �޴��� �׻� ����ڿ��� ������� ��.
		 
		 -------------------------
		 ������ ���� ���� ���α׷� v1.0
		 -------------------------
		 1. ���� ���� �� ����
		 2. ���� �б�
		 3. ����
		 -------------------------
		 �޴��� �����ϼ��� : 1
		 ���� ���� �� ���� ����˴ϴ�.
		 
		 �޴��� �����ϼ��� : 3
		 ���α׷��� ����˴ϴ�.
		 
		 8. 6�� ������ ������ �Ʒ� ���·� ����ϱ�.
		 -------------------
		 ������ ���α׷� v1.5
		 -------------------
		 2X1=2 3X1=3 4X1=4 5X1=5
		 ...
		 2X9=18 3X9=27 4X9=36 5X9=45
		 
		 6X1=6 ... 9X1=9
		 ...
		 6X9=54 ... 9X9=81
		 */

		
		
		/*
		 ===========================================
		 1. �ذ� ���� ���
		 -C/C++, Java, C# Python, ��Ÿ ���α׷��� ���
		 2. �ذ� ����
		 -�迭 ����
		 3.Ư�̻���
		 -Python ������ �迭 ��� ����Ʈ ����
		 ===========================================
		 */
		
		/*
		 1. ���� 1���� �迭�� �հ� ����� ���ϼ���
		 ����1) �迭 �ʱⰪ --> 20,34,22,14,36,23,67
		 
		 2. 1~100������ ���� 1���� �迭�� ����.
		 ����1) ����� �迭���� 5�� ����� ����ϼ���.
		 ����2) �迭�� ��ġ�� 90��° �϶� ����� ������.
		 
		 3. �Ʒ��� �����͸� ���ο� �迭�� ������ ��, ����ϼ���.
		 ����1) �迭 �ʱⰪ --> 10,20,30,40,50,60,70,80,90,100
		 ����2) ���ο� �迭�� �����ϰ� 100,90,80 ������ �����Ͽ� ���.
		 
		 4. �Ʒ��� ������ �迭�� ����ϼ���.
		 ����1) {{1,2}, {2,4,6}, {3,6}, {4,8,10,12}, {10}}
		 ����2) �ݵ�� �Ʒ��� ���� ���·� ��� �ٶ�. (2�� ���� ����ؾߵ�)
		 arr[0][0]=1 arr[0][1]=2
		 arr[1][0]=2 arr[1][1]=4 arr[1][2]=6
		 arr[2][0]=3 arr[2][1]=6
		 arr[3][0]=4 arr[3][1]=8 arr[3][2]=10 arr[3][3]=12
		 arr[4][0]=10
		 
		 5. �Ʒ� ����� ������ ���ϼ���.
		 ����1) 1~9������ ����� 2���� �迭�� �����ϱ�.
		 ����2) 10~90������ ����� 2���� �迭�� �����ϱ�.
		 ����3) �� ����� �����Ͽ� ���ο� 2���� �迭�� �����ϰ� ��������� ����ϱ�.
		 ����4) ������� �Ʒ��� ���� ���·� ����ϱ�.
		 11 22 33 
		 44 55 66 
		 77 88 99
		 
		 ex) ����� ������ �� �ڷ��
		 1 2 3      10 20 30
		 4 5 6   +  40 50 60
		 7 8 9      70 80 90
		 
		 6. �������� ������� ������ �迭�� ������ ��, ������� ����ϼ���.
		 ����1) ������� ������ ���ο� ������ �迭�� ����.
		 ����2) ������ ����� �� ��������� ����.
		 2X1=2 3X1=3 4X1=4 5X1=5 ... 9X1=9
		 ...
		 2X9=18 3X9=27 ...           9X9=81
		 
		 7. ���� �޴��� ������ ���α׷� �ۼ��ϱ�.
		 ---------------------------
		 ���� ���� ���α׷� v1.1
		 ---------------------------
		 1. �̸� �����Ͽ� ���Ͽ� �����ϱ�
		 2. ���Ͽ��� �̸� �о����
		 3. ���α׷� ����
		 ---------------------------
		 �޴� ���� : 
		 
		 ����1) 1���� �迭 �ʱⰪ
		 �̸��� 1��° --> �� �� �� �� ��
		 �̸��� 2��° --> �� �� �� �� ��
		 �̸��� 3��° --> �� �� �� �� ��
		 
		 ����2) ���� ���� ���� �����ϰ� �߻��ϵ��� �Ͽ� 50���� Ǯ������ �����Ͽ�
		 �迭�� ����.
		 -����1) last���� �����ϰ� 1���� �迭 ��Ұ��� ����
		 -����2) first���� �����ϰ� 1���� �迭 ��Ұ��� ����
		 -����3) mid���� �����ϰ� 1���� ���� ����
		 -����4) Ǯ������ ������ �迭�� ����
		 -����5) �����ϰ� ������ 3���� ������ ���ļ� �ϳ��� ��ü �̸����� ����.
		 
		 ����3) ������ Ǯ���� 50���� ���Ͽ� ����.
		 ����4) ���Ͽ� ����� �̸����� �о ����Ҷ��� ���κ��� ��� �ٶ�.
		 
		 
		 8. 1~45�� ���ڸ� �������� �߻����Ѽ� �ζ� ���α׷� �����.
		 ����1) for,while,do-while ���
		 ����2) ������ ���ڰ� �߻����� �ʵ��� ó���ϱ�.
		 ----------------------
		 ������ �ζ� ���α׷� v1.1
		 ----------------------
		 23 7 10 11 39 44
		 */
		
		/*
		 ===========================================
		 1. 해결 가능 언어
		 -C/C++, Java, C# Python, 기타 프로그래밍 언어
		 2. 해결 조건
		 -Loop (반복문) 이해
		 ===========================================
		 */
		
		/*
		 1. 3개의 숫자를 입력받아서 홀수, 짝수를 구분하는 프로그램.
		 조건1) for, while, do-while 사용
		 ---------------------------
		 짝수,홀수 구분 프로그램 v1.0
		 ---------------------------
		 1.Num1 => 6
		 짝수입니다.
		 2.Num2 => 71
		 홀수입니다.
		 3.Num3 => 34
		 짝수입니다.
		 
		 2. 1~100까지의 숫자주에 5의 배수만 출력하는 프로그램.
		 조건1) for, while, do-while 사용
		 5,10,15,20...95,100
		 
		 3. 1~45의 숫자를 랜덤으로 발생시켜 로또 프로그램 만들기.
		 조건1) for, while, do-while 사용
		 조건2) 동일한 숫자가 발생하는것은 무시(배열에서 처리 필요)
		 --------------------
		 간단한 로또 프로그램 v1.0
		 --------------------
		 23 7 10 11 39 44
		 
		 4. 2개의 숫자를 입력 받아서 첫번째 숫자는 시작, 두번째 숫자는 마지막을 나타냄. 
		 시작부터 끝까지 수의 합을 구하기.
		 조건1) 입력받는 2번째의 수가 첫번째 수보다 작거나 같으면 에러를 
		 표시하고 다시 2번째 숫자를 입력 받도록 처리.
		 1.Num1 입력=> 1
		 2.Num2 입력=> 10
		 1~10까지의 합 : 55
		 
		 5. 1개의 숫자를 입력받아 구구단 출력
		 -----------------
		 간단한 구구단 프로그램
		 -----------------
		 1. 구구단 입력 => 4
		 4 X 1 = 4
		 ...
		 4 X 9 = 36
		 
		 6. 구구단 2 ~ 9단까지 출력
		 -----------------
		 구구단 프로그램 v1.3
		 -----------------
		 2X1=2 3X1=3 4X1=4 ... 9X1=9
		 2X2=4 3X2=6 4X2=8 ... 9X2=18
		 ...
		 2X9=18				   9X9=81
		 
		 7. 무한루프를 사용하여 동작하는 프로그램
		 조건1) 메뉴 선택을 잘못하면 "잘못된 입력입니다."를 출력하고
		 다시 메뉴 선택하도록 처리.
		 조건2) 메뉴를 선택하여 실행하더라도 메뉴는 항상 사용자에게 보여줘야 함.
		 
		 -------------------------
		 간단한 파일 관리 프로그램 v1.0
		 -------------------------
		 1. 파일 생성 및 쓰기
		 2. 파일 읽기
		 3. 종료
		 -------------------------
		 메뉴를 선택하세요 : 1
		 파일 생성 및 쓰기 실행됩니다.
		 
		 메뉴를 선택하세요 : 3
		 프로그램이 종료됩니다.
		 
		 8. 6번 구구단 문제를 아래 형태로 출력하기.
		 -------------------
		 구구단 프로그램 v1.5
		 -------------------
		 2X1=2 3X1=3 4X1=4 5X1=5
		 ...
		 2X9=18 3X9=27 4X9=36 5X9=45
		 
		 6X1=6 ... 9X1=9
		 ...
		 6X9=54 ... 9X9=81
		 */

		
		
		/*
		 ===========================================
		 1. 해결 가능 언어
		 -C/C++, Java, C# Python, 기타 프로그래밍 언어
		 2. 해결 조건
		 -배열 이해
		 3.특이사항
		 -Python 에서는 배열 대신 리스트 적용
		 ===========================================
		 */
		
		/*
		 1. 다음 1차원 배열의 합과 평균을 구하세요
		 조건1) 배열 초기값 --> 20,34,22,14,36,23,67
		 
		 2. 1~100까지의 수를 1차원 배열에 저장.
		 조건1) 저장된 배열에서 5의 배수만 출력하세요.
		 조건2) 배열의 위치가 90번째 일때 출력을 중지함.
		 
		 3. 아래의 데이터를 새로운 배열에 저장한 후, 출력하세요.
		 조건1) 배열 초기값 --> 10,20,30,40,50,60,70,80,90,100
		 조건2) 새로운 배열을 생성하고 100,90,80 순으로 저장하여 출력.
		 
		 4. 아래의 이차원 배열을 출력하세요.
		 조건1) {{1,2}, {2,4,6}, {3,6}, {4,8,10,12}, {10}}
		 조건2) 반드시 아래와 같은 형태로 출력 바람. (2중 루프 사용해야됨)
		 arr[0][0]=1 arr[0][1]=2
		 arr[1][0]=2 arr[1][1]=4 arr[1][2]=6
		 arr[2][0]=3 arr[2][1]=6
		 arr[3][0]=4 arr[3][1]=8 arr[3][2]=10 arr[3][3]=12
		 arr[4][0]=10
		 
		 5. 아래 행렬의 덧셈을 구하세요.
		 조건1) 1~9까지의 행렬을 2차원 배열에 저장하기.
		 조건2) 10~90까지의 행렬을 2차원 배열에 저장하기.
		 조건3) 두 행렬을 덧셈하여 새로운 2차원 배열에 저장하고 결과값들을 출력하기.
		 조건4) 결과값은 아래와 같은 형태로 출력하기.
		 11 22 33 
		 44 55 66 
		 77 88 99
		 
		 ex) 행렬의 덧셈을 할 자료들
		 1 2 3      10 20 30
		 4 5 6   +  40 50 60
		 7 8 9      70 80 90
		 
		 6. 구구단의 결과값을 이차원 배열에 저장한 후, 결과값을 출력하세요.
		 조건1) 결과값을 저장할 새로운 이차원 배열을 생성.
		 조건2) 연산이 실행될 때 결과값들을 저장.
		 2X1=2 3X1=3 4X1=4 5X1=5 ... 9X1=9
		 ...
		 2X9=18 3X9=27 ...           9X9=81
		 
		 7. 다음 메뉴를 가지는 프로그램 작성하기.
		 ---------------------------
		 파일 제어 프로그램 v1.1
		 ---------------------------
		 1. 이름 생성하여 파일에 저장하기
		 2. 파일에서 이름 읽어오기
		 3. 프로그램 종료
		 ---------------------------
		 메뉴 선택 : 
		 
		 조건1) 1차원 배열 초기값
		 이름의 1번째 --> 김 박 이 최 장
		 이름의 2번째 --> 바 사 아 자 차
		 이름의 3번째 --> 가 나 다 라 마
		 
		 조건2) 위의 값을 각각 랜덤하게 발생하도록 하여 50개의 풀네임을 생성하여
		 배열에 저장.
		 -순서1) last에서 랜덤하게 1개의 배열 요소값을 선택
		 -순서2) first에서 랜덤하게 1개의 배열 요소값을 선택
		 -순서3) mid에서 랜덤하게 1개의 값을 선택
		 -순서4) 풀네임을 저장할 배열을 생성
		 -순서5) 랜덤하게 생선된 3개의 값들을 합쳐서 하나의 전체 이름으로 생성.
		 
		 조건3) 생성된 풀네임 50개를 파일에 저장.
		 조건4) 파일에 저장된 이름들을 읽어서 출력할때는 라인별로 출력 바람.
		 
		 
		 8. 1~45의 숫자를 랜덤으로 발생시켜서 로또 프로그램 만들기.
		 조건1) for,while,do-while 사용
		 조건2) 동일한 숫자가 발생하지 않도록 처리하기.
		 ----------------------
		 간단한 로또 프로그램 v1.1
		 ----------------------
		 23 7 10 11 39 44
		 */
	}

}
